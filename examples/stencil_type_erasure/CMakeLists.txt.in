cmake_minimum_required(VERSION @CMAKE_MINIMUM_REQUIRED_VERSION@)
project(stencil_type_erasure LANGUAGES CXX)

# enable CUDA if it is found on the system
include(../workaround_check_language.cmake) # see https://gitlab.kitware.com/cmake/cmake/issues/19013
_workaround_check_language(CUDA)
if(CMAKE_CUDA_COMPILER)
    # 2) Enable the CUDA language if you want to run your code on a CUDA-capable GPU. This
    #    must be done before calling `find_package(GridTools)`
    enable_language(CUDA)
endif()

find_package(GridTools @GridTools_VERSION@ REQUIRED
    HINTS @CMAKE_INSTALL_PREFIX@/lib/cmake/GridTools)

enable_testing()

if(TARGET GridTools::stencil_cpu_ifirst)
    add_executable(driver_cpu_ifirst driver.cpp interpolate_stencil.cpp)
    target_link_libraries(driver_cpu_ifirst GridTools::stencil_cpu_ifirst)
    add_test(NAME driver_cpu_ifirst COMMAND $<TARGET_FILE:driver_cpu_ifirst> 33 44 55)
endif()

if(TARGET GridTools::stencil_cuda)
    set(EXAMPLE_CUDA_ARCH "@GT_CUDA_ARCH@" CACHE STRING "CUDA compute capability to be used for this example.")

    add_library(stencil_lib_cuda interpolate_stencil.cpp)
    target_link_libraries(stencil_lib_cuda PRIVATE GridTools::stencil_cuda)
    target_compile_definitions(stencil_lib_cuda PUBLIC USE_GPU)
    gridtools_setup_target(stencil_lib_cuda CUDA_ARCH ${EXAMPLE_CUDA_ARCH})

    add_executable(driver_cuda driver.cpp) # Can be build with the host compiler
    target_link_libraries(driver_cuda PRIVATE stencil_lib_cuda)
    target_link_libraries(driver_cuda PRIVATE GridTools::storage_cuda)

    add_test(NAME driver_cuda COMMAND $<TARGET_FILE:driver_cuda> 33 44 55)
endif()

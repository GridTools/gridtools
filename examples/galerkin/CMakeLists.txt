set(XDMF_ROOT "OFF" CACHE PATH "location of the xdmf library")

#####################look for Xdmf library########################
if(ENABLE_XDMF)
  find_package(Xdmf REQUIRED HINTS ${XDMF_ROOT})
  if(XDMF_FOUND)
    include_directories( "${XDMF_INCLUDE_DIRS}" )
    set ( exe_LIBS "${exe_LIBS}" "${XDMF_LIBRARIES}" )
    message("XDMF libs found in " "${XDMF_LIBRARIES}")
    message("XDMF includes found in " "${XDMF_INCLUDE_DIRS}")
  else()
    if(XDMF_LIBS AND XDMF_INCLUDE_DIRS)
      set ( exe_LIBS "${exe_LIBS}" "${XDMF_LIBS}" )
      message("xdmf libs: " "${XDMF_LIBS}")
      include_directories( "${XDMF_INCLUDE_DIRS}" )
    else()
      message("Xdmf library not found. set the XDMF_INCLUDE_DIR and XDMF_LIBS to the headers and libraries path.")
    endif(XDMF_LIBS AND XDMF_INCLUDE_DIRS)
  endif(XDMF_FOUND)
endif(ENABLE_XDMF)
##################################################################

include_directories( SYSTEM ${Boost_INCLUDE_DIRS} )

add_executable( stiffness examples/stiffness.cpp )
add_executable( mass examples/mass.cpp )
add_executable( mass_2D examples/mass_2D.cpp )
add_executable( mass_IGA examples/mass_IGA.cpp )
add_executable( dg_flux examples/dg_flux.cpp )
add_executable( gather examples/gather.cpp )
add_executable( dg_advection examples/dg_advection.cpp )
add_executable( legendre examples/legendre.cpp )
set_target_properties( stiffness PROPERTIES COMPILE_FLAGS ${ADDITIONAL_CXX_FLAGS} )
set_target_properties( mass PROPERTIES COMPILE_FLAGS ${ADDITIONAL_CXX_FLAGS} )
set_target_properties( mass_2D PROPERTIES COMPILE_FLAGS ${ADDITIONAL_CXX_FLAGS} )
set_target_properties( mass_IGA PROPERTIES COMPILE_FLAGS ${ADDITIONAL_CXX_FLAGS} )
set_target_properties( dg_flux PROPERTIES COMPILE_FLAGS ${ADDITIONAL_CXX_FLAGS} )
set_target_properties( gather PROPERTIES COMPILE_FLAGS ${ADDITIONAL_CXX_FLAGS} )
set_target_properties( dg_advection PROPERTIES COMPILE_FLAGS ${ADDITIONAL_CXX_FLAGS} )
set_target_properties( legendre PROPERTIES COMPILE_FLAGS ${ADDITIONAL_CXX_FLAGS} )

set( ENABLE_INTREPID "OFF" CACHE BOOL "Enable support of finite elements discretization from the Intrepid library" )
if(ENABLE_INTREPID)

  if(NOT INTREPID_SOURCE_DIR)
    message("set the INTREPID_SOURCE_DIR to point to the intrepid sources")
  else()
    message("intrepid headers in " ${INTREPID_SOURCE_DIR})
    include_directories( SYSTEM ${INTREPID_SOURCE_DIR} )
  endif(NOT INTREPID_SOURCE_DIR)
  if(NOT INTREPID_LIB_DIR)
    message("set the INTREPID_LIB_DIR to point to the intrepid libraries")
  else()
    find_library( INTREPID_LIB intrepid ${INTREPID_LIB_DIR})
    message("intrepid found in " ${INTREPID_LIB})
    find_library( KOKKOS_LIB kokkoscore ${INTREPID_LIB_DIR})
    message("kokkos found in " ${KOKKOS_LIB})
    find_library( TEUCHOS_LIB teuchoscore ${INTREPID_LIB_DIR})
    message("teuchos found in " ${TEUCHOS_LIB})
    find_library( TEUCHOS_NUMERICS_LIB teuchosnumerics ${INTREPID_LIB_DIR})
    message("teuchos numerics found in " ${TEUCHOS_NUMERICS_LIB})
    find_library( SHARDS_LIB shards ${INTREPID_LIB_DIR})
    message("shards found in " ${SHARDS_LIB})

    if(BLAS_DIR)
        message("looking for BLAS in" ${BLAS_DIR})
        set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ${BLAS_DIR})
    else()
        message("BLAS not found. Set the BLAS_DIR manually")
    endif(BLAS_DIR)

    if(LAPACK_DIR)
        message("looking for LAPACK in" ${LAPACK_DIR})
          set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ${LAPACK_DIR})
    else()
        message("LAPACK not found. Set the LAPACK_DIR manually")
    endif(LAPACK_DIR)

   find_package(BLAS)
   set( BLAS_LIBS  ${BLAS_LIBRARIES})

   if(NOT BLAS_FOUND)
          message("BLAS library not found. Set the path to the installation via the BLAS_DIR CMake variable.")
          if(BLAS_HARDCODED_LIB)
          set( BLAS_LIBS  ${BLAS_HARDCODED_LIB})
          message ("setting BLAS library to an hardcoded path: " ${BLAS_HARDCODED_LIB})
          endif()
   endif(NOT BLAS_FOUND)

   find_package(LAPACK)
   if(NOT LAPACK_FOUND)
          message("Lapack library not found. Set the path to the installation via the LAPACK_DIR CMake variable.")
   endif(NOT LAPACK_FOUND)

   if(LAPACK_HARDCODED_LIB)
     set( LAPACK_LIBRARIES ${LAPACK_HARDCODED_LIB})
     message ("setting LAPACK library to an hardcoded path: " ${BLAS_HARDCODED_LIB})
   endif()

   message("Blas in " ${BLAS_LIBS})
   message("Lapack in " ${LAPACK_LIBRARIES})
   message("Teuchos Numerics in " ${TEUCHOS_LIB})

endif(NOT INTREPID_LIB_DIR)
endif(ENABLE_INTREPID)

target_link_libraries( stiffness ${exe_LIBS} gcl ${MPI_ADDITIONAL_LIBS}  ${INTREPID_LIB}  ${SHARDS_LIB} ${TEUCHOS_NUMERICS_LIB} ${TEUCHOS_LIB} ${LAPACK_LIBRARIES}  ${LAPACK_LIBRARIES} ${BLAS_LIBS} )
target_link_libraries( mass ${exe_LIBS} gcl ${MPI_ADDITIONAL_LIBS} ${INTREPID_LIB} ${SHARDS_LIB} ${TEUCHOS_NUMERICS_LIB} ${TEUCHOS_LIB}  ${LAPACK_LIBRARIES} ${BLAS_LIBS})
target_link_libraries( mass_2D ${exe_LIBS} gcl ${MPI_ADDITIONAL_LIBS} ${INTREPID_LIB} ${SHARDS_LIB} ${TEUCHOS_NUMERICS_LIB} ${TEUCHOS_LIB}  ${LAPACK_LIBRARIES} ${BLAS_LIBS})
target_link_libraries( mass_IGA ${exe_LIBS}   ${INTREPID_LIB} ${SHARDS_LIB} ${TEUCHOS_LIB}  ${LAPACK_LIBRARIES} ${BLAS_LIBS})
target_link_libraries( dg_flux ${exe_LIBS}  ${INTREPID_LIB} ${SHARDS_LIB}  ${TEUCHOS_NUMERICS_LIB} ${TEUCHOS_LIB} ${LAPACK_LIBRARIES} ${BLAS_LIBS})
target_link_libraries( gather ${exe_LIBS}  ${INTREPID_LIB} ${SHARDS_LIB} ${TEUCHOS_NUMERICS_LIB} ${TEUCHOS_LIB} ${LAPACK_LIBRARIES} ${BLAS_LIBS})
target_link_libraries( dg_advection ${exe_LIBS}  ${INTREPID_LIB} ${SHARDS_LIB}  ${TEUCHOS_NUMERICS_LIB} ${TEUCHOS_LIB} ${LAPACK_LIBRARIES} ${BLAS_LIBS})
target_link_libraries( legendre ${exe_LIBS}  ${INTREPID_LIB} ${SHARDS_LIB}  ${TEUCHOS_NUMERICS_LIB} ${TEUCHOS_LIB} ${LAPACK_LIBRARIES} ${BLAS_LIBS})

if(CUDA_FOUND)
cuda_add_executable( dg_flux_cuda examples/dg_flux.cu )
target_link_libraries(dg_flux_cuda  ${exe_LIBS} ${INTREPID_LIB} ${SHARDS_LIB} ${TEUCHOS_NUMERICS_LIB}  ${TEUCHOS_LIB} ${LAPACK_LIBRARIES} )

cuda_add_executable( dg_advection_cuda examples/dg_advection.cu )
target_link_libraries(dg_advection_cuda  ${exe_LIBS} ${INTREPID_LIB} ${SHARDS_LIB} ${TEUCHOS_NUMERICS_LIB}  ${TEUCHOS_LIB} ${LAPACK_LIBRARIES} )

cuda_add_executable( mass_IGA_cuda examples/mass_IGA.cu )
target_link_libraries(mass_IGA_cuda  ${exe_LIBS} ${INTREPID_LIB} ${SHARDS_LIB} ${TEUCHOS_LIB} )
endif(CUDA_FOUND)

add_subdirectory( IGA )
add_subdirectory( doc )

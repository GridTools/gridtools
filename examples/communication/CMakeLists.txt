set( OLD_OPTIONS "${CMAKE_CXX_FLAGS}" )
set(CUDA_SEPARABLE_COMPILATION OFF)

### Executables
if(GCL_ONLY)
else(GCL_ONLY)

  ### L2
  if( USE_MPI )
    foreach(srcfile test_all_to_all_halo_3D test_halo_exchange_3D_all test_halo_exchange_3D_all_2 test_halo_exchange_3D_all_3 test_halo_exchange_3D_generic test_halo_exchange_3D_generic_full)
      add_executable( ${srcfile} ../../examples/communication/${srcfile}.cpp)
      add_dependencies(${srcfile} gcl)
      set_target_properties(${srcfile} PROPERTIES COMPILE_FLAGS "${HOST_SPECIFIC_OPTIONS} -DSTANDALONE")
      target_link_libraries(${srcfile} ${exe_LIBS} )
    endforeach(srcfile)
  endif()


  if( USE_GPU )
    ##set(CMAKE_CXX_FLAGS "${OLD_OPTIONS}")
    if( GCL_MPI )
      if ( USE_MPI_COMPILER )
        #message( "MPI enabled for CUDA - compiling with mpi compiler" )
        include_directories( ${MPI_INCLUDE_PATH} )
        #message( "MPI include path: ${MPI_INCLUDE_PATH}" )
        #link_directories( ${MPI_LIBRARY} )
      else( USE_MPI_COMPILER )
        #message( "MPI enabled for CUDA - compiling with wrappers" )
        set( MPI_INCLUDE_PATH $ENV{MPICH_DIR}/include )
        #set( MPI_LIBRARY_PATH $ENV{MPICH_DIR}/lib )
        #set( CUDA_MPI_LIB mpi )
        #link_directories( ${MPI_LIBRARY_PATH} )
        include_directories( ${MPI_INCLUDE_PATH} )
        #message( "MPI include path: ${MPI_INCLUDE_PATH}" )
      endif( USE_MPI_COMPILER )
    endif( GCL_MPI )
    if( USE_MPI )
      if(NOT MSVC)
        cuda_add_executable( cuda_test_halo_exchange_3D_all ../../examples/communication/test_halo_exchange_3D_all.cu OPTIONS -DSTANDALONE ${GPU_SPECIFIC_FLAGS})
        add_dependencies( cuda_test_halo_exchange_3D_all gcl )
        target_link_libraries( cuda_test_halo_exchange_3D_all   ${exe_LIBS_GPU} )

        cuda_add_executable( cuda_test_halo_exchange_3D_all_2 ../../examples/communication/test_halo_exchange_3D_all_2.cu  OPTIONS -DSTANDALONE ${GPU_SPECIFIC_FLAGS})
        add_dependencies( cuda_test_halo_exchange_3D_all_2 gcl )
        target_link_libraries( cuda_test_halo_exchange_3D_all_2   ${exe_LIBS_GPU} )

        cuda_add_executable( cuda_test_halo_exchange_3D_all_3 ../../examples/communication/test_halo_exchange_3D_all_3.cu  OPTIONS -DSTANDALONE ${GPU_SPECIFIC_FLAGS})
        add_dependencies( cuda_test_halo_exchange_3D_all_3 gcl )
        target_link_libraries( cuda_test_halo_exchange_3D_all_3   ${exe_LIBS_GPU} )

        cuda_add_executable( cuda_test_halo_exchange_3D_generic ../../examples/communication/test_halo_exchange_3D_generic.cu  OPTIONS -DSTANDALONE ${GPU_SPECIFIC_FLAGS})
        add_dependencies( cuda_test_halo_exchange_3D_generic gcl )
        target_link_libraries( cuda_test_halo_exchange_3D_generic  ${exe_LIBS_GPU} )

        cuda_add_executable( cuda_test_halo_exchange_3D_generic_full ../../examples/communication/test_halo_exchange_3D_generic_full.cu  OPTIONS -DSTANDALONE ${GPU_SPECIFIC_FLAGS})
        add_dependencies( cuda_test_halo_exchange_3D_generic_full gcl )
        target_link_libraries( cuda_test_halo_exchange_3D_generic_full  ${exe_LIBS_GPU} )

      endif()
    endif()
  endif()
endif()

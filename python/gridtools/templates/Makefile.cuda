{% extends "Makefile.base" %}

{% block extra_targets %}
#
# path to CUDA toolkit
#
ifndef CUDATOOLKIT_HOME
$(error CUDATOOLKIT_HOME is not set)
else
CUDA ?= ${CUDATOOLKIT_HOME}
endif

#
# compilers and their flags
#
NVCC 	  := $(CUDA)/bin/nvcc
CXXFLAGS  := $(CXXFLAGS) -D_USE_GPU_ -D_GCL_GPU_
NVCCFLAGS := -w -ccbin $(CXX) -m64 $(GTFLAGS) -DNVCC -Xcompiler ,\"-D_USE_GPU_\",\"-fopenmp\",\"-D_GCL_GPU_\",\"-O3\",\"-w\",\"-fPIC\",\"-DNDEBUG\" -Xcudafe --diag_suppress=dupl_calling_convention -Xcudafe --diag_suppress=code_is_unreachable -Xcudafe --diag_suppress=implicit_return_from_non_void_function -Xcudafe --diag_suppress=calling_convention_not_allowed -Xcudafe --diag_suppress=conflicting_calling_conventions
#NVCCFLAGS := -w -G -ccbin $(CXX) -m64 $(GTFLAGS) -DNVCC -Xcompiler ,\"-D_USE_GPU_\",\"-fopenmp\",\"-D_GCL_GPU_\",\"-O0\",\"-w\",\"-fPIC\" -Xcudafe --diag_suppress=dupl_calling_convention -Xcudafe --diag_suppress=code_is_unreachable -Xcudafe --diag_suppress=implicit_return_from_non_void_function -Xcudafe --diag_suppress=calling_convention_not_allowed -Xcudafe --diag_suppress=conflicting_calling_conventions
ifeq ($(UNAME_S),Linux)
  LIBRARIES := $(LIBRARIES) -rdynamic $(CUDA)/lib64/libcudart.$(LIBEXT)
endif
ifeq ($(UNAME_S),Darwin)
  LIBRARIES := $(LIBRARIES) -rdynamic $(CUDA)/lib/libcudart.$(LIBEXT)
endif
INCLUDES  := $(INCLUDES) -I$(CUDA)/include
GENCODE   := $(GENCODE) -Wl,-rpath,$(CUDA)/lib64
OBJS      := GCL $(OBJS)

#
# Extra target rules
#
GCL:
	$(CXX) $(CXXFLAGS) $(INCLUDES) -o $@ -c $(GRIDTOOLS)/src/GCL.cpp

%.o: %.cu
	$(NVCC) $(NVCCFLAGS) $(INCLUDES) -o $@ -c $<

{% endblock %}

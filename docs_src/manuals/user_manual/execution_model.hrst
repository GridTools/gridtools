.. _execution-model:

Execution Model
===============

Stencil operations are executed in a three dimensional :term:`Iteration space`. The first two dimensions of the
iteration space, usually referred to as `I` and `J` dimensions identify the horizontal dimension. There is no
prescription on in what order stencil operators in different points of the same `IJ` plane will be executed. Stencil
operators in the third dimension of the iteration space, usually referred as `K` or vertical dimension, can have
prescribed order of executions. There are three different ways of execution policies for the `K` dimension:

- `forward`: The computation at index `k` in the vertical dimension is executed after index `k - 1` for all points in
  the horizontal plane;
- `backward`: The computation at index `k` in the vertical dimension is executed after index `k + 1` for all points in
  the horizontal plane;
- `parallel`: No order is specified and execution can happen concurrently.

An execution strategy for a computation is indicated by ``execute::order()``,
where `order` is one of the `K` dimension execution orders: ``forward``, ``backward``, ``parallel``.

The parallel execution policy allows for tuning the degree of parallelism (in the CUDA backend), by selecting
``execute::parallel_block<vertical_block_size>``, where ``vertical_block_size`` describes the dimension of CUDA block
in the vertical (a too high value e.g. each k-level in a separate CUDA-thread might result in a too low instruction level
parallelism and therefore in non-optimal performance).

.. note::

   The option to specify the vertical block size will most likely be moved to the backend in the future,
   see :ref:`backend-selection`.  

function(gridtools_depends_on dst lib dependency)
    if (NOT TARGET ${dependency})
        return()
    elseif (lib STREQUAL dependency)
        set(${dst} ON PARENT_SCOPE)
    elseif (TARGET ${lib})
        get_target_property(deps ${lib} INTERFACE_LINK_LIBRARIES)
        if (deps)
            foreach(dep IN LISTS deps)
                gridtools_depends_on(child ${dep} ${dependency})
                if (child)
                    set(${dst} ON PARENT_SCOPE)
                    return()
                endif()
            endforeach()
        endif()
    endif()
endfunction()

set(_GT_INCLUDER_IN ${CMAKE_CURRENT_LIST_DIR}/includer.in)

function(gridtools_convert_to_cuda_source dst srcfile)
    get_filename_component(extension ${srcfile} LAST_EXT)
    if(extension STREQUAL ".cu")
        set(${dst} ${srcfile} PARENT_SCOPE)
    else()
        set(INCLUDER_SRC ${CMAKE_CURRENT_SOURCE_DIR}/${srcfile})
        configure_file(${_GT_INCLUDER_IN} ${srcfile}.cu)
        set(${dst} ${CMAKE_CURRENT_BINARY_DIR}/${srcfile}.cu PARENT_SCOPE)
    endif()
endfunction()

function(gridtools_convert_to_cxx_source srcfile)
    get_filename_component(extension ${srcfile} LAST_EXT)
    if(extension STREQUAL ".cu")
        set_source_files_properties(${srcfile} PROPERTIES LANGUAGE CXX)
    endif()
endfunction()

function(gridtools_normalize_source_names lib dst)
    gridtools_depends_on(nvcc_cuda ${lib} gridtools_nvcc)
    if (nvcc_cuda)
        foreach(srcfile IN LISTS ARGN)
            gridtools_convert_to_cuda_source(converted ${srcfile})
            list(APPEND acc ${converted})
        endforeach()
        set(${dst} ${acc} PARENT_SCOPE)
    else()
        foreach(srcfile IN LISTS ARGN)
            gridtools_convert_to_cxx_source(${srcfile})
        endforeach()
        set(${dst} ${ARGN} PARENT_SCOPE)
    endif()
endfunction()

function(gridtools_setup_target tgt)
    set(options)
    set(one_value_args CUDA_ARCH)
    set(multi_value_args SOURCES LIBRARIES)
    cmake_parse_arguments(ARGS "${options}" "${one_value_args}" "${multi_value_args}" ${ARGN})
    target_link_libraries(${tgt} PUBLIC ${ARGS_LIBRARIES})
    gridtools_normalize_source_names(${tgt} normalized_sources ${ARGS_SOURCES})
    target_sources(${tgt} PRIVATE ${normalized_sources})
    if (ARGS_CUDA_ARCH)
        gridtools_depends_on(need_cuda ${tgt} gridtools_cuda)
        if (need_cuda)
            target_compile_options(${tgt} PUBLIC ${GT_CUDA_ARCH_FLAG}=${ARGS_CUDA_ARCH})
        endif()
    endif()
endfunction()

function(gridtools_add_executable tgt)
    add_executable(${tgt})
    gridtools_setup_target(${tgt} ${ARGN})
endfunction()

function(gridtools_add_library tgt)
    add_library(${tgt})
    gridtools_setup_target(${tgt} ${ARGN})
endfunction()

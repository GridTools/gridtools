# Create a library with c- and Fortran-bindings
#
# Usage of this module:
#
#  add_bindings_library(<library-name> SOURCE <sources>[...] [FORTRAN_OUTPUT_DIR fortran_dir] [C_OUTPUT_DIR c_dir])
#
#  Arguments:
#   SOURCE: sources of the library
#   FORTRAN_OUTPUT_DIR: destination for generated Fortran files (default: ${CMAKE_CURRENT_LIST_DIR})
#   C_OUTPUT_DIR: destination for generated C files (default: ${CMAKE_CURRENT_LIST_DIR})
#
# Variables used by this module:
#
#  GT_BINDINGS_CROSS_COMPILATION:
#  If GT_BINDINGS_CROSS_COMPILATION=ON, bindings will not be generated, but expected to be provided,
#  as part of the user source code, e.g. by updating bindings with the bindings generator during development.
#  If GT_BINDINGS_CROSS_COMPILATION is not defined already it will be made available after including this file.
#  Including this module will make the cached CMake variable GT_BINDINGS_CROSS_COMPILATION available.
#
# In the default case (GT_BINDINGS_CROSS_COMPILATION=OFF), the bindings files are generated in the directory
# of the CMakeLists with the call to add_bindings_library().
#
# Targets generated by add_bindings_library(<library-name> ...):
#  - <library_name> library build from <Sources...> without bindings (ususally this target is not used)
#  - <library_name>_declarations will run the generator for this library
#  - <library_name>_c the C-bindings with <library_name> linked to it
#  - <library_name>_fortran the Fortran-bindings with <library_name> linked to it


if(NOT DEFINED GRIDTOOLS_LIBRARIES_DIR)
    option(GT_BINDINGS_CROSS_COMPILATION "If turned on, bindings will not be generated." OFF)
endif()

macro(add_bindings_library target_name)
    set(options)
    set(one_value_args FORTRAN_OUTPUT_DIR C_OUTPUT_DIR)
    set(multi_value_args SOURCE)
    cmake_parse_arguments(ARG "${options}" "${one_value_args};" "${multi_value_args}" ${ARGN})

    if (DEFINED GRIDTOOLS_LIBRARIES_DIR)
        set(binding_libs ${GRIDTOOLS_LIBRARIES_DIR}/libc_bindings_generator.a
            ${GRIDTOOLS_LIBRARIES_DIR}/libc_bindings_handle.a)
        set(binding_f90_libs ${GRIDTOOLS_LIBRARIES_DIR}/libc_bindings_handle_fortran.a
            ${GRIDTOOLS_LIBRARIES_DIR}/libarray_descriptor.a)
        set(binding_main_lib  ${GRIDTOOLS_LIBRARIES_DIR}/libc_bindings_generator_main.a)
    else()
        set(binding_libs c_bindings_generator c_bindings_handle)
        set(binding_f90_libs c_bindings_handle_fortran array_descriptor)
        set(binding_main_lib c_bindings_generator_main)
    endif()

    add_library(${target_name} ${ARG_SOURCE})

    target_link_libraries(${target_name} ${binding_libs})
    add_custom_command(OUTPUT ${target_name}_empty.cpp COMMAND touch ${target_name}_empty.cpp)
    add_executable(${target_name}_decl_generator
            ${CMAKE_CURRENT_BINARY_DIR}/${target_name}_empty.cpp)
    if (${APPLE})
          target_link_libraries(${target_name}_decl_generator
              -Wl,-force_load ${target_name} ${bindings_main}
              ${binding_main_lib})
    else()
          target_link_libraries(${target_name}_decl_generator
              -Xlinker --whole-archive ${target_name}
              -Xlinker --no-whole-archive ${binding_main_lib})
    endif()
    add_custom_command(OUTPUT ${target_name}.h ${target_name}.f90
            COMMAND ${target_name}_decl_generator ${target_name}.h ${target_name}.f90 ${target_name}
            DEPENDS $<TARGET_FILE:${target_name}_decl_generator>)

    add_custom_target(${target_name}_declarations
            DEPENDS ${CMAKE_CURRENT_LIST_DIR}/${target_name}.h ${CMAKE_CURRENT_LIST_DIR}/${target_name}.f90)

    add_library(${target_name}_c ${CMAKE_CURRENT_BINARY_DIR}/${target_name}_empty.cpp)
    target_link_libraries(${target_name}_c ${target_name})
    add_dependencies(${target_name}_c ${target_name}_declarations)
    target_include_directories(${target_name}_c INTERFACE "${CMAKE_CURRENT_BINARY_DIR}")

    add_library(${target_name}_fortran ${CMAKE_CURRENT_BINARY_DIR}/${target_name}.f90)
    target_link_libraries(${target_name}_fortran ${target_name} ${binding_f90_libs})
    add_dependencies(${target_name}_fortran ${target_name}_declarations)
    target_include_directories(${target_name}_fortran INTERFACE "${CMAKE_CURRENT_BINARY_DIR}")

endmacro()


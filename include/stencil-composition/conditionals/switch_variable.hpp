/*
  GridTools Libraries

  Copyright (c) 2017, ETH Zurich and MeteoSwiss
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  1. Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

  2. Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

  3. Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  For information: http://eth-cscs.github.io/gridtools/
*/

#pragma once
#include <memory>
#include "condition.hpp"

/**@file*/

namespace gridtools {

    /**
       @brief defines a variable which is used in the @ref gridtools::switch_ statement

       The value stored in this object is used to compare with all the different cases defined
       by the user. This class also holds the vector of conditionals which is automatically
       generated by the @ref gridtools::switch_ statement

       NOTE: there is a 1-to-1 relation between switch_variable and switch_ statements. The case in
       which 2 switch_ statements share the same switch_variable will produce an error. This because
       each switch_ statement would try to fill the same m_conditions vector in the switch_variable
       with the list of the cases defined by the user.
       TODO: add a protection for that

       \tparam Tag a unique integer identifying this switch_variable
       \tparam T the type used for the comparisons (usually an integral type)
     */
    template < uint_t Tag, typename T >
    class switch_variable {
        std::function< T() > m_value;
        uint_t m_num_cases;

      public:
        typedef static_uint< Tag > index_t;
        static const uint_t index_value = index_t::value;

        std::unique_ptr< std::vector< std::function< bool() > > > m_conditions; // generated conditions
        std::unique_ptr< std::vector< T > > m_cases;                            // all possible cases (redundant)

        constexpr switch_variable() // try to avoid this?
            : m_value(),
              m_conditions(new std::vector< std::function< bool() > >()),
              m_cases(std::vector< T >()) {}

        /**@brief constructor

           @param c the value assigned for the comparisons
         */
        constexpr switch_variable(std::function< T() > c)
            : m_value(c), m_conditions(new std::vector< std::function< bool() > >()), m_cases(new std::vector< T >()) {}

        switch_variable(switch_variable const &other) : m_value(other.m_value), m_num_cases(other.m_num_cases) {}

        ~switch_variable() {}

        /**@brief API to insert a condition*/
        void push_back_condition(std::function< bool() > c) { m_conditions->push_back(c); }
        /**@brief API to insert a case value*/
        void push_back_case(T c) { m_cases->push_back(c); }
        /**@brief returns by non const reference the std::vector of condiitons*/
        std::vector< std::function< bool() > > &conditions() { return *m_conditions; }
        /**@brief returns by non const reference the std::vector of cases*/
        std::vector< T > &cases() { return *m_cases; }
        /**@brief returns the number of cases for the switch associated to this variable*/
        uint_t num_conditions() { return m_conditions->size(); }

        /**@brief returns the value of the switch_variable*/
        constexpr std::function< T() > value() const { return m_value; }
    };

    template < typename T >
    struct is_switch_variable : boost::mpl::false_ {};

    template < uint_t Tag, typename T >
    struct is_switch_variable< switch_variable< Tag, T > > : boost::mpl::true_ {};
} // namespace gridtools

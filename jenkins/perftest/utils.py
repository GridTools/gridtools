# -*- coding: utf-8 -*-

from perftest import ArgumentError
from datetime import datetime, timezone


def timestr(time=None):
    """Returns the given time (or current time if None) as a string.

    Args:
        time:  (Default value = None) The time that should be converted.

    Returns:
        A string representing `time`, compatible to ISO 8601 time format.
    """
    if time is None:
        time = datetime.now(timezone.utc)
    return time.strftime('%Y-%m-%dT%H:%M:%S.%f%z')


def timestr_from_posix(posixtime):
    """Converts a posix time stamp to a time string.

    Args:
      posixtime: Posix time stamp.

    Returns:
        A string representing `posixtime`, compatible to ISO 8601 time format.
    """
    return timestr(datetime.fromtimestamp(int(posixtime), timezone.utc))


def datetime_from_timestr(timestr):
    """Converts a time string back to a `datetime.datetime` object.

    The given string must be in the format as generated by `timestr` and
    `timestr_from_posix`.

    Args:
        timestr: A string representing a time in the supported format.

    Returns:
        A `datetime.datetime` object, representing the same time as `timestr`.
    """
    try:
        return datetime.strptime(timestr, '%Y-%m-%dT%H:%M:%S.%f%z')
    except ValueError:
        raise ArgumentError(f'"{timestr}" is an invalid time string') from None


def short_timestr(timestr):
    """Shortens a time string to a better readable format.

    The given string must be in the format as generated by `timestr` and
    `timestr_from_posix`.

    Args:
        timestr: A string representing a time in the supported format.

    Returns:
        Same time string in shortened format.
    """
    return datetime_from_timestr(timestr).strftime('%y-%m-%d %H:%M')

.. _stencil-composition:

Stencil Composition
========================

.. _placeholders:

------------------------------------------
Preparing arguments: storage placeholders
------------------------------------------

.. _defining_iteration_space:

---------------------------------------------------
Defining the iteration space: the grid
---------------------------------------------------

The :ref:`stencil operators<stencil_operators>` describe operations on a single *point of evaluation*.
The :term:`iteration space<iterationspace>` defines on which points the operator should be applied. In this section
we cover how to define the iteration space with the ``grid`` object.

|GT| offers a set of functions which ease the construction of the ``grid``:

.. cpp:function:: grid make_grid(int size_i, int size_j, int size_k)

   The simplest iteration space will iterate the cube defined by the intervals
   ``[0, size_i-1]``, ``[0, size_j-1]``, ``[0, size_k-1]``

.. cpp:function:: grid make_grid(halo_descriptor halo_i, halo_descriptor halo_j, int size_z)

   For finer control of the iteration space a ``halo_descriptor`` can be passed for the horizontal directions (``I`` and ``J``).
   The 3rd and 4th argument of the ``halo_descriptor`` define the start and the endpoint of the iteration space, see also :ref:`halo descriptor<halo-descriptor>`.
  
.. note::
   Only the 3rd and the 4th argument in the halo descriptor is used the stencil-composition,
   but we kept the same implementation we had in other parts of GridTools to avoid introducing too many concepts.
   This will be improved in the future.
  
.. note::
   The vertical dimension cannot be defined with a ``halo_descriptor``, see :ref:`next section<vertical_regions>`.


.. _vertical_regions:

---------------------------------------------------
Vertical regions and vertical boundary conditions
---------------------------------------------------

As mentioned earlier, the |GT| :ref:`execution model<execution-model>`
allows to be sequential in the vertical dimension (``k``). Additionally, |GT|
offers the possibility to split the vertical dimension into vertical regions,
where stencils can perform different operations. Typical applications of this pattern are models which define
terrain-following coordinates close to the earth surface and flat-coordinates in upper
levels of the atmosphere. Another use-case are vertical boundary-conditions which can
be directly integrated into the stencil operation.

.. note::
   In the following we will distinguish two concepts: first *vertical regions* are non-overlapping
   subsets of the vertical iteration space with run-time defined sizes; second *vertical intervals* (or just *intervals*)
   are compile-time defined descriptions from one vertical level (not every vertical level can be selected, see below) to another.
 

^^^^^^^^^^^^^^^^^^^
Default interval
^^^^^^^^^^^^^^^^^^^

In simple applications, where all vertical levels should be treated equally, |GT| allows to 
use a default interval which covers the full vertical region. In this case the :ref:`stencil operator<stencil_operators>`
should be defined without specifying an interval and the iteration space can be defined as explained
in the :ref:`previous section<defining_iteration_space>`. 

^^^^^^^^^^^^^^^^^^^^^^^^^^^
Defining vertical intervals
^^^^^^^^^^^^^^^^^^^^^^^^^^^

|GT| allows to split the full vertical iteration space into regions. The number of vertical regions needs to be specified at
compile-time, while the size of each region can be defined at run-time.

For defining a computation with more than a single vertical region we need to define an ``axis`` first.  

.. code-block:: gridtools

   using my_axis_t = axis<N>

where `N` describes the number of vertical regions.

At runtime the axis is instantiated with the sizes of each region,

.. code-block:: gridtools

   my_axis_t my_axis{N0, N1, N2, ...};
   
where the ``Nx`` are the sizes of region ``x``. With our axis object we can now generate a grid with one of the following
signatures

.. code-block:: gridtools

   grid make_grid(int size_i, int size_j, axis<N> my_axis)
   grid make_grid(halo_descriptor halo_i, halo_descriptor halo_j, axis<N> my_axis)

Each region already defines a vertical interval which can be queried from the axis by

.. code-block:: gridtools

   using first_interval = my_axis_t::get_interval<0>;
   using second_interval = my_axis_t::get_interval<1>;
   using full_interval = my_axis_t::full_interval;
   ...
   
Note that the intervals are compile time object, i.e. C++ types. These intervals
are used for defining which ``Do``-method version of the stencil operator should be used during the iteration, see :ref:`Do-method<stencil_operators_do_method>`.

Interval provides meta-functions which allow to define modified intervals

- ``interval::first_level``, which is the interval (a C++ type) describing the first level of the interval  
- ``interval::last_level``, which is interval describing the last level of the interval
- ``interval::modify<begin,end>``, which is an interval extended (``begin`` < 0) or shrunk (``begin`` > 0) at at the beginning of the interval, and extended (``end`` > 0) or shrunk (``end`` < 0) at the end of the interval.
- ``interval::shift<value>``, which is the interval shifted by ``value``, i.e. it is a shortcut for ``modify<value,value>``.

Examples:

.. code-block:: gridtools

   using axis_t = axis<2>; // axis with 2 vertical regions
   axis_t my_axis(5,10); // iteration space spans 5 + 10 levels
   
   using first_interval = axis_t::get_interval<0>;         // interval [0,4]
   using second_interval = axis_t::get_interval1>;         // [5,14]
   using full_interval = my_axis_t::full_interval;         // [0,14]
   
   using first_level = full_interval::first_level;         // [0]
   using last_level = full_interval::last_level;           // [14]
   using a_middle_level = second_interval::first_level;    // [5]
   
   using a_middle_interval = a_middle_level::modify<-1,0>; // [4,5]
   using a_middle_interval2 = a_middle_interval::shift<1>; // [5,6]
   
.. note:

   Only a fixed number (default: 2) of levels around a vertical region can be addressed in this way, see
   :ref:`advanced functionality<vertical_regions_advanced>`.

.. _vertical_regions_advanced:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Advanced functionality for vertical intervals
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``axis`` type has two additional template parameters to change defaults

.. todo:: the code block needs to be updated once ExtraOffsetsAroundFullInterval is removed

.. code-block:: gridtools

   template <size_t NIntervals, int_t ExtraOffsetsAroundFullInterval = 0, int_t LevelOffsetLimit = 2> class axis;

- ``LevelOffsetLimit``, defines how many levels around a vertical region can be addressed. Increasing this value could have negative implications on compile-time. 


-----------------------
Composition of Stencils
-----------------------

The main component of |GT| provide the capability of composing different
`elementary stencils`. An `elementary stencil` is the application of a single
:ref:`stencil operator<stencil_operators>` to an :term:`iteration
space<iterationspace>` . The ability to fuse multiple elementary stencils
allows the |GT| library to improve the memory locality of the computation by
taking advantage of the produce consumer relations. In |GT| terminology we use
the term `stage` to refer to an elementary stencil when it is composed with
other operations.

The result of a composition is a :term:`multi-stage
computation<MultiStageComputation>`, also called `multi-stage stencil` or
simply `stencil`. For reason of uniformity, a multi-stage computation with a
singe stage, is still called a multi-stage, since the composition is generally
assumed to take a list of stages, even if the stage is just one.

.. note::

 This decision put the emphasis on the fact that composition
 is considered the main feature of |GT|. If your application
 is made of a simple stencil, or stencils that cannot be
 composed (see below), then |GT| may not be the right solution
 for you.

|GT| allows multi-stage computations to be composed. The final composition,
with the addition of a :term:`grid<Grid>` is simply called a |GT|
:term:`computation<Computation>`, or simply :term:`computation<Computation>`.

Before entering the details of what can be composed and what not, let
us show first an example of a stencil composition: a simple horizontal
diffusion stencil.

First we need to specify the stages. A stage is specified by
indicating a :ref:`stencil operator<stencil_operators>` and some
:ref:`placeholders<placeholders>` to its arguments. The placeholders are
aliases to the actual arguments and are used to compute the data
dependencies of the computation independently of the actual data
fields that will be accessed by the computation. The syntax for
specifying a stage uses a helper function called `make_stage`:

.. code-block:: gridtools

 auto stage = make_stage<operator>(plc0(), plc1(), ...);

Where the `operator` is the stencil operator of the stage and the `plc0`,
`plc1`, â€¦ are the placeholders. The number and the intent of the placeholders
depend on the :ref:`stencil operator interface<stencil_operators>`.

A multi-stage computation is a concatenation of stages, plus the indication of
the :ref:`execution order<execution-model>` to be used for all the stages as in
the following example for a diffusion operator.

.. code-block:: gridtools

 auto multi_stage = make_multistage(
     execute<forward>(),
     make_stage<lap_operator>(p_lap(), p_in()),
     make_stage<flx_operator>(p_flx(), p_in(), p_lap()),
     make_stage<fly_operator>(p_fly(), p_in(), p_lap()),
     make_stage<out_operator>(p_out(), p_in(), p_flx(), p_fly())
 );

.. note::

 It is not possible to make a multi-stage computation with stages of different
 :ref:`execution orders<execution-model>`.

The data-dependence analysis of |GT| will determine the producer consumer
relations and the extents at which each data field will be accessed. This
information is then passed to the architecture specific backend for the
execution.

Before the computation can be executed, a grid, specifying
the iteration space, must be provided. The final example is:

.. code-block:: gridtools

 auto horizontal_diffusion = make_computation<backend_t>(
     grid,
     make_multistage(
         execute<forward>(),
         make_stage<lap_operator>(p_lap(), p_in()),
         make_stage<flx_operator>(p_flx(), p_in(), p_lap()),
         make_stage<fly_operator>(p_fly(), p_in(), p_lap()),
         make_stage<out_operator>(p_out(), p_in(), p_flx(), p_fly())
     )
 );


where `backend_t` specifies the backend that will execute the computation.

The execution of the stages are assumed to happen one after the other in the
program order. This is quite important, since the data dependency analysis is
performed with this assumption. Some architectures provide different types of
synchronization, and a user may gain a little more performance if they are more
specific in the expression of the dependencies. For instance, we can assume the
the `flx_operator` and `fly_operator` do not have producer-consumer
dependencies the user can specify that they are independent:

.. code-block:: gridtools

 auto horizontal_diffusion = make_computation<backend_t>(
     grid,
     make_multistage(
         execute<forward>(),
         make_stage<lap_operator>(p_lap(), p_in()),
         make_independent(
             make_stage<flx_operator>(p_flx(), p_in(), p_lap()),
             make_stage<fly_operator>(p_fly(), p_in(), p_lap())),
         make_stage<out_operator>(p_out(), p_in(), p_flx(), p_fly())
     )
 );

`make_independent` does not have impact on the data-dependency analysis but,
potentially, only on the execution schedule.

In general `make_computation` has the following signature:

.. code-block:: gridtools

 make_computation<backend_t>(grid, multi_stage0, other_multi_stages...);

A computation can then incorporate multiple multi-stage computations and they
may have different execution policies. This is very useful for implementing
computations that require two vertical swipes, one ascending and one
descending, but has to be used with care. Before explaining the rules for using
this feature, we provide a simple example of the syntax in the vertical
advenction example:

.. code-block:: gridtools

 auto vertical_advection = make_computation<backend_t>(
     grid,
     make_multistage(
         execute<forward>(),
         make_stage<forward_op>(p_utens_stage(), p_wcon()),
     ),
     make_multistage(
         execute<backward>(),
         make_stage<backward_op>(p_utens_stage(), p_u_pos())
     )
 );

This option is particularly useful on multi-core machines with caches, since
the backend there can actively pass information between the two stages thus
improving substantially the performance.

Again the multi-stages in the same computation will be executed logically in
program order. Two multi-stage computations can be concatenated if the outputs
of the stages that are used as input of the following obey the following rule:
Let `u` be the output of a stage `S0` that is input the stage `S1`. The extent
at which `u` is accessed by `S1` must be the point-extent, that is the access
of `u` is point-wise, so no offsets of `u` can be accessed. This is because the
parallel execution of the stages can produce non deterministic results
otherwise. Certain backends do not fuse multiple multi-stage computations, so
this effect could be not visible, but for portability, it is important that
this rule is understood.

To execute a given :term:`multi-stage computation<MultiStageComputation>`, the
`run` method has to be called. Data has to be assigned to each non-temporary
:ref:`placeholder<placeholders>`.

.. code-block:: gridtools

 horizontal_diffusion.run(p_out() = out_data, p_in() = in_data);

.. note::

 No data can be assigned to temporary fields (i.e., `tmp_arg`
 :ref:`placeholders<placeholders>`). Storage for all temporary arguments is
 managed by |GT|.

In case that the stencil is always run on the same data fields, you can also
assign those fields to the respective placeholders directly in the
`make_computation` call, i.e. at definition time instead of run time, e.g.:

.. code-block:: gridtools

 auto horizontal_diffusion = make_computation<backend_t>(
     grid,
     p_out() = out_data, // data assignment happens here
     p_in() = in_data, // and here
     make_multistage(
         execute<forward>(),
         make_stage<lap_operator>(p_lap(), p_in()),
         make_independent(
             make_stage<flx_operator>(p_flx(), p_in(), p_lap()),
             make_stage<fly_operator>(p_fly(), p_in(), p_lap())),
         make_stage<out_operator>(p_out(), p_in(), p_flx(), p_fly())
     )
 );

 horizontal_diffusion.run() // no data has to be specified here


There are other details that pertain :ref:`placeholders<placeholders>`,
:term:`grid<Grid>`, :term:`data field pack<DataFieldPack>` and also other |GT|
constructs that can greatly improve performance of the computations, especially
:ref:`software managed caches<caches>`.

.. _backend-selection:

---------------------
Selecting the Backend
---------------------

.. todo:: Choose a proper location for this section
